import pygame
import time
import math

# Initialize pygame
pygame.init()

# Set up display
window_size = (1200, 800)
screen = pygame.display.set_mode(window_size)
pygame.display.set_caption("Automatic Ship Farming Script - Shipping Lanes Map")

# Colors
BACKGROUND_COLOR = (10, 10, 30)
WAYPOINT_COLOR = (0, 255, 180)
SHIP_COLOR = (255, 50, 50)
WAYPOINT_TEXT_COLOR = (200, 200, 255)
BUTTON_COLOR = (50, 50, 200)
BUTTON_HOVER_COLOR = (80, 80, 255)
BUTTON_TEXT_COLOR = (255, 255, 255)
LINE_COLOR = (50, 50, 100)

# Ship properties
ship_pos = [200, 300]
ship_speed = 2
ship_radius = 10

# Define waypoints
waypoints = []

# Shipping Lanes Map Layout - Adjust these coordinates to resemble the in-game map more accurately
map_waypoints = [
    (100, 100), (300, 100), (500, 100), (700, 100), (900, 100),
    (100, 300), (300, 300), (500, 300), (700, 300), (900, 300),
    (100, 500), (300, 500), (500, 500), (700, 500), (900, 500),
    (100, 700), (300, 700), (500, 700), (700, 700), (900, 700)
]
waypoints.extend(map_waypoints)

current_waypoint_index = 0

# Load font (use default if 'futurist' is not available)
font = pygame.font.Font(pygame.font.match_font('futurist', bold=True) or pygame.font.get_default_font(), 24)

# Function to move ship towards the target with smooth movement
def move_towards(target, current, speed):
    dx, dy = target[0] - current[0], target[1] - current[1]
    distance = math.sqrt(dx ** 2 + dy ** 2)
    if distance < speed:
        return target[0], target[1]
    else:
        angle = math.atan2(dy, dx)
        current[0] += math.cos(angle) * speed
        current[1] += math.sin(angle) * speed
        return current[0], current[1]

# Function to draw button
def draw_button(text, rect, active=False):
    color = BUTTON_HOVER_COLOR if active else BUTTON_COLOR
    pygame.draw.rect(screen, color, rect)
    button_text = font.render(text, True, BUTTON_TEXT_COLOR)
    screen.blit(button_text, (rect[0] + 10, rect[1] + 10))

# Main loop
running = True
while running:
    mouse_pos = pygame.mouse.get_pos()
    mouse_pressed = pygame.mouse.get_pressed()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if event.button == 1:  # Left mouse button
                # Check if clicking on a waypoint
                for index, waypoint in enumerate(waypoints):
                    if (waypoint[0] - 10 <= mouse_pos[0] <= waypoint[0] + 10) and (waypoint[1] - 10 <= mouse_pos[1] <= waypoint[1] + 10):
                        current_waypoint_index = index
                        break
                # Check if clicking to add a new waypoint
                add_waypoint_button_rect = (1050, 700, 120, 50)
                if add_waypoint_button_rect[0] <= mouse_pos[0] <= add_waypoint_button_rect[0] + add_waypoint_button_rect[2] and \
                   add_waypoint_button_rect[1] <= mouse_pos[1] <= add_waypoint_button_rect[1] + add_waypoint_button_rect[3]:
                    waypoints.append(mouse_pos)

    # Get current waypoint
    target_x, target_y = waypoints[current_waypoint_index]

    # Move ship towards waypoint
    ship_pos[0], ship_pos[1] = move_towards((target_x, target_y), ship_pos, ship_speed)

    # Draw everything
    screen.fill(BACKGROUND_COLOR)

    # Draw grid lines to resemble the shipping lanes map
    for i in range(1, 5):
        pygame.draw.line(screen, LINE_COLOR, (i * 200, 0), (i * 200, window_size[1]))
    for i in range(1, 4):
        pygame.draw.line(screen, LINE_COLOR, (0, i * 200), (window_size[0], i * 200))

    # Draw waypoints
    for index, waypoint in enumerate(waypoints):
        pygame.draw.circle(screen, WAYPOINT_COLOR, waypoint, 8)
        text = font.render(str(index + 1), True, WAYPOINT_TEXT_COLOR)
        screen.blit(text, (waypoint[0] - 10, waypoint[1] - 10))

    # Draw ship
    pygame.draw.circle(screen, SHIP_COLOR, (int(ship_pos[0]), int(ship_pos[1])), ship_radius)
    pygame.draw.circle(screen, (0, 255, 255), (int(ship_pos[0]), int(ship_pos[1])), ship_radius + 3, 1)  # Glow effect

    # Draw add waypoint button
    add_waypoint_button_rect = (1050, 700, 120, 50)
    draw_button("Add Waypoint", add_waypoint_button_rect, add_waypoint_button_rect[0] <= mouse_pos[0] <= add_waypoint_button_rect[0] + add_waypoint_button_rect[2] and \
                add_waypoint_button_rect[1] <= mouse_pos[1] <= add_waypoint_button_rect[1] + add_waypoint_button_rect[3])

    # Update display
    pygame.display.flip()

    # Control frame rate
    time.sleep(0.01)

# Quit pygame
pygame.quit()
